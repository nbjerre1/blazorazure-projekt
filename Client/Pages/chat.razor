@page "/chat"
@using System.Net.Http.Json
@using System.Timers
@inject HttpClient Http
@using BlazorApp.Shared

<h1>Chat</h1>

<div>
    <input @bind="user" placeholder="Your name" />
    <input @bind="message" placeholder="Your message" @onkeypress="@(e => OnEnter(e))" />
    <button @onclick="SendMessage">Send</button>
</div>

<div class="chat-container">
    @foreach (var msg in messages)
    {
        <div class="message">
            <strong>@msg.User</strong> (@msg.Timestamp.ToString("g")):
            <span>@msg.Message</span>
        </div>
    }
</div>

@code {
    private string user = "";
    private string message = "";
    private List<ChatMessage> messages = new List<ChatMessage>();
    private System.Timers.Timer timer;

    protected override void OnInitialized()
    {
        timer = new System.Timers.Timer(5000);
        timer.Elapsed += async (sender, e) => await RefreshMessages();
        timer.Start();

        // Initial load
        RefreshMessages();
    }

    private async Task RefreshMessages()
    {
        try
        {
            var fetchedMessages = await Http.GetFromJsonAsync<List<ChatMessage>>("api/Chat");
            if (fetchedMessages != null)
            {
                messages = fetchedMessages;
                await InvokeAsync(StateHasChanged);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading messages: {ex.Message}");
        }
    }

    private async Task SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(user) && !string.IsNullOrWhiteSpace(message))
        {
            var chatMessage = new ChatMessage
                {
                    User = user,
                    Message = message,
                    Timestamp = DateTime.Now
                };

            try
            {
                await Http.PostAsJsonAsync("api/Chat", chatMessage);
                message = ""; // Clear message input after sending
                await RefreshMessages(); // Reload messages
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending message: {ex.Message}");
            }
        }
    }

    private async Task OnEnter(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    public void Dispose()
    {
        timer?.Stop();
        timer?.Dispose();
    }
}